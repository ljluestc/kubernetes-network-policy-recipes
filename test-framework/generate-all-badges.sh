#!/usr/bin/env bash
# Generate all project badges (coverage, tests, CI/CD status, etc.)

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
BADGE_DIR="${PROJECT_ROOT}/badges"

# Load dependencies
source "${SCRIPT_DIR}/lib/badge-generator.sh"
source "${SCRIPT_DIR}/lib/kcov-wrapper.sh" 2>/dev/null || true
source "${SCRIPT_DIR}/lib/coverage-config.sh"

mkdir -p "$BADGE_DIR"

echo "========================================="
echo "Generating All Project Badges"
echo "========================================="

# 1. Generate test coverage badge from existing coverage report
if [ -f "test-framework/results/coverage-report.json" ]; then
    echo "Generating test coverage badge..."
    generate_all_badges "test-framework/results/coverage-report.json" "$BADGE_DIR"
fi

# 2. Generate bash code coverage badge if kcov report exists
if [ -f "test-framework/results/kcov/merged/coverage.json" ]; then
    echo "Generating bash code coverage badge..."
    BASH_COV=$(get_coverage_percentage "test-framework/results/kcov/merged")
    generate_coverage_badge "$BASH_COV" "${BADGE_DIR}/bash-coverage.json"
fi

# 3. Generate combined coverage badge
if [ -f "test-framework/results/coverage-report.json" ]; then
    OVERALL_COV=$(jq -r '.coverage.overall // 0' "test-framework/results/coverage-report.json")

    # Determine color
    if (( $(echo "$OVERALL_COV >= 90" | bc -l) )); then
        COLOR="brightgreen"
    elif (( $(echo "$OVERALL_COV >= 75" | bc -l) )); then
        COLOR="green"
    elif (( $(echo "$OVERALL_COV >= 60" | bc -l) )); then
        COLOR="yellow"
    else
        COLOR="red"
    fi

    cat > "${BADGE_DIR}/overall-coverage.json" <<EOF
{
  "schemaVersion": 1,
  "label": "coverage",
  "message": "${OVERALL_COV}%",
  "color": "$COLOR"
}
EOF
    echo "Generated overall coverage badge: ${OVERALL_COV}%"
fi

# 4. Generate tests badge
if [ -f "test-framework/results/coverage-report.json" ]; then
    TEST_COUNT=$(jq -r '.details.total_test_cases // 0' "test-framework/results/coverage-report.json")

    cat > "${BADGE_DIR}/tests.json" <<EOF
{
  "schemaVersion": 1,
  "label": "tests",
  "message": "$TEST_COUNT passing",
  "color": "brightgreen"
}
EOF
    echo "Generated tests badge: $TEST_COUNT tests"
fi

# 5. Generate CI/CD status badges (these are typically generated by CI platforms)
# Generate placeholder for local development
cat > "${BADGE_DIR}/build-status.json" <<EOF
{
  "schemaVersion": 1,
  "label": "build",
  "message": "passing",
  "color": "brightgreen"
}
EOF

# 6. Generate quality gate badge
if [ -f "test-framework/results/quality-gate-report.txt" ]; then
    if grep -q "RESULT: âœ“ PASS" "test-framework/results/quality-gate-report.txt"; then
        STATUS="passing"
        COLOR="brightgreen"
    else
        STATUS="failing"
        COLOR="red"
    fi

    cat > "${BADGE_DIR}/quality-gate.json" <<EOF
{
  "schemaVersion": 1,
  "label": "quality gate",
  "message": "$STATUS",
  "color": "$COLOR"
}
EOF
    echo "Generated quality gate badge: $STATUS"
fi

# 7. Generate recipes badge
RECIPE_COUNT=$(find "$PROJECT_ROOT" -maxdepth 1 -name "[0-9][0-9]*.md" | wc -l)
cat > "${BADGE_DIR}/recipes.json" <<EOF
{
  "schemaVersion": 1,
  "label": "recipes",
  "message": "$RECIPE_COUNT available",
  "color": "blue"
}
EOF
echo "Generated recipes badge: $RECIPE_COUNT recipes"

# 8. Generate license badge
cat > "${BADGE_DIR}/license.json" <<EOF
{
  "schemaVersion": 1,
  "label": "license",
  "message": "Apache-2.0",
  "color": "blue"
}
EOF

echo ""
echo "========================================="
echo "Badge Generation Complete"
echo "========================================="
echo "Badges saved to: $BADGE_DIR"
echo ""
echo "To use in README:"
echo "  ![Coverage](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/YOUR_REPO/badges/overall-coverage.json)"
echo "  ![Tests](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/YOUR_REPO/badges/tests.json)"
echo "  ![Quality Gate](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/YOUR_REPO/badges/quality-gate.json)"
echo "========================================="

# List all generated badges
echo "Generated badges:"
ls -lh "$BADGE_DIR"/*.json 2>/dev/null || echo "No badges generated"
