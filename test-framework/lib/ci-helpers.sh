#!/bin/bash
# CI/CD Integration Helpers
# Utilities for integrating test framework with CI/CD pipelines

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${BLUE}[CI]${NC} $*" >&2; }
error() { echo -e "${RED}[ERROR]${NC} $*" >&2; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $*" >&2; }

# Post test results to GitHub PR comment
post_github_comment() {
    local json_file="$1"
    local pr_number="${2:-${GITHUB_PR_NUMBER:-}}"
    local repo="${3:-${GITHUB_REPOSITORY:-}}"
    local token="${GITHUB_TOKEN:-}"

    if [[ -z "$pr_number" ]] || [[ -z "$repo" ]] || [[ -z "$token" ]]; then
        error "Missing required environment: GITHUB_TOKEN, GITHUB_PR_NUMBER, or GITHUB_REPOSITORY"
        return 1
    fi

    if [[ ! -f "$json_file" ]]; then
        error "JSON file not found: $json_file"
        return 1
    fi

    local total=$(jq -r '.summary.total' "$json_file")
    local passed=$(jq -r '.summary.passed' "$json_file")
    local failed=$(jq -r '.summary.failed' "$json_file")
    local timeout=$(jq -r '.summary.timeout' "$json_file")
    local pass_rate=$(jq -r '.summary.pass_rate' "$json_file")
    local duration=$(jq -r '.summary.total_duration_seconds' "$json_file")

    local status_emoji="‚úÖ"
    [[ $failed -gt 0 ]] || [[ $timeout -gt 0 ]] && status_emoji="‚ùå"

    local comment_body=$(cat <<EOF
## $status_emoji Network Policy Test Results

| Metric | Value |
|--------|-------|
| Total Tests | $total |
| ‚úÖ Passed | $passed |
| ‚ùå Failed | $failed |
| ‚è±Ô∏è Timeout | $timeout |
| üìä Pass Rate | ${pass_rate}% |
| ‚è∞ Duration | ${duration}s |

<details>
<summary>Detailed Results</summary>

\`\`\`json
$(jq -c '.results[]' "$json_file" | head -20)
\`\`\`

</details>

---
*Generated by Network Policy Test Framework*
EOF
)

    curl -sX POST \
        -H "Authorization: token $token" \
        -H "Content-Type: application/json" \
        "https://api.github.com/repos/$repo/issues/$pr_number/comments" \
        -d "$(jq -n --arg body "$comment_body" '{body: $body}')" \
        > /dev/null

    success "Posted comment to PR #$pr_number"
}

# Generate JUnit XML format (for Jenkins, GitLab CI, etc.)
generate_junit_xml() {
    local json_file="$1"
    local output_file="${2:-test-results.xml}"

    if [[ ! -f "$json_file" ]]; then
        error "JSON file not found: $json_file"
        return 1
    fi

    local total=$(jq -r '.summary.total' "$json_file")
    local passed=$(jq -r '.summary.passed' "$json_file")
    local failed=$(jq -r '.summary.failed' "$json_file")
    local duration=$(jq -r '.summary.total_duration_seconds' "$json_file")

    cat > "$output_file" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<testsuites tests="$total" failures="$failed" time="$duration">
    <testsuite name="NetworkPolicyTests" tests="$total" failures="$failed" time="$duration">
EOF

    while IFS= read -r result; do
        local recipe_id=$(echo "$result" | jq -r '.recipe_id')
        local status=$(echo "$result" | jq -r '.status')
        local test_duration=$(echo "$result" | jq -r '.duration_seconds')
        local error_msg=$(echo "$result" | jq -r '.error_message // ""')
        local output=$(echo "$result" | jq -r '.output')

        if [[ "$status" == "PASS" ]]; then
            cat >> "$output_file" <<TESTEOF
        <testcase name="NP-$recipe_id" time="$test_duration" />
TESTEOF
        else
            cat >> "$output_file" <<TESTEOF
        <testcase name="NP-$recipe_id" time="$test_duration">
            <failure message="$(echo "$error_msg" | sed 's/"/\&quot;/g')">
$(echo "$output" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g')
            </failure>
        </testcase>
TESTEOF
        fi
    done < <(jq -c '.results[]' "$json_file")

    cat >> "$output_file" <<EOF
    </testsuite>
</testsuites>
EOF

    success "JUnit XML generated: $output_file"
}

# Send Slack notification
send_slack_notification() {
    local json_file="$1"
    local webhook_url="${2:-${SLACK_WEBHOOK_URL:-}}"

    if [[ -z "$webhook_url" ]]; then
        error "SLACK_WEBHOOK_URL not set"
        return 1
    fi

    if [[ ! -f "$json_file" ]]; then
        error "JSON file not found: $json_file"
        return 1
    fi

    local passed=$(jq -r '.summary.passed' "$json_file")
    local failed=$(jq -r '.summary.failed' "$json_file")
    local timeout=$(jq -r '.summary.timeout' "$json_file")
    local pass_rate=$(jq -r '.summary.pass_rate' "$json_file")

    local color="good"
    local emoji=":white_check_mark:"
    if [[ $failed -gt 0 ]] || [[ $timeout -gt 0 ]]; then
        color="danger"
        emoji=":x:"
    fi

    local payload=$(cat <<EOF
{
    "attachments": [{
        "color": "$color",
        "title": "$emoji Network Policy Test Results",
        "fields": [
            {"title": "Passed", "value": "$passed", "short": true},
            {"title": "Failed", "value": "$failed", "short": true},
            {"title": "Timeout", "value": "$timeout", "short": true},
            {"title": "Pass Rate", "value": "${pass_rate}%", "short": true}
        ]
    }]
}
EOF
)

    curl -sX POST -H 'Content-type: application/json' --data "$payload" "$webhook_url" > /dev/null
    success "Sent Slack notification"
}

# Generate badge JSON (for shields.io)
generate_badge() {
    local json_file="$1"
    local output_file="${2:-badge.json}"

    if [[ ! -f "$json_file" ]]; then
        error "JSON file not found: $json_file"
        return 1
    fi

    local pass_rate=$(jq -r '.summary.pass_rate' "$json_file")
    local color="brightgreen"

    if (( $(echo "$pass_rate < 70" | bc -l) )); then
        color="red"
    elif (( $(echo "$pass_rate < 90" | bc -l) )); then
        color="yellow"
    fi

    cat > "$output_file" <<EOF
{
  "schemaVersion": 1,
  "label": "tests",
  "message": "${pass_rate}% passing",
  "color": "$color"
}
EOF

    success "Badge JSON generated: $output_file"
}

# Upload artifacts (supports multiple platforms)
upload_artifacts() {
    local results_dir="$1"
    local platform="${2:-github}"

    case "$platform" in
        github)
            # GitHub Actions artifact upload
            if command -v gh &> /dev/null; then
                log "Uploading artifacts via gh CLI..."
                gh run upload --name test-results "$results_dir"
                success "Artifacts uploaded to GitHub Actions"
            else
                error "gh CLI not found"
                return 1
            fi
            ;;
        gitlab)
            # GitLab CI artifacts are handled via .gitlab-ci.yml
            log "GitLab artifacts configured via .gitlab-ci.yml"
            ;;
        jenkins)
            # Jenkins uses archiveArtifacts in Jenkinsfile
            log "Jenkins artifacts configured via Jenkinsfile"
            ;;
        *)
            error "Unknown platform: $platform"
            return 1
            ;;
    esac
}

# Main CLI
main() {
    local command="${1:-help}"

    case "$command" in
        github-comment)
            post_github_comment "${2:-}" "${3:-}" "${4:-}"
            ;;
        junit-xml)
            generate_junit_xml "${2:-}" "${3:-}"
            ;;
        slack)
            send_slack_notification "${2:-}" "${3:-}"
            ;;
        badge)
            generate_badge "${2:-}" "${3:-}"
            ;;
        upload)
            upload_artifacts "${2:-}" "${3:-}"
            ;;
        *)
            cat <<EOF
Usage: $0 <command> [args]

Commands:
    github-comment <json> [pr-number] [repo]   Post results to GitHub PR
    junit-xml <json> [output-file]            Generate JUnit XML
    slack <json> [webhook-url]                 Send Slack notification
    badge <json> [output-file]                 Generate shields.io badge JSON
    upload <dir> [platform]                    Upload artifacts (github|gitlab|jenkins)

Environment Variables:
    GITHUB_TOKEN          GitHub API token
    GITHUB_PR_NUMBER      PR number for comments
    GITHUB_REPOSITORY     Repository (owner/repo)
    SLACK_WEBHOOK_URL     Slack incoming webhook URL

Examples:
    $0 github-comment results/aggregate.json 123
    $0 junit-xml results/aggregate.json test-results.xml
    $0 slack results/aggregate.json https://hooks.slack.com/...
    $0 badge results/aggregate.json badge.json
EOF
            ;;
    esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
